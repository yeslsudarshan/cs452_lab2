; Compiled by GCC
.text
	.align 2
.proc _isspace
.global _isspace
_isspace:
;  Function 'isspace'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	lb	r2,3(r30)
	addi	r31,r0,#0
	andi	r1,r2,#0x00ff
	seqi	r1,r1,#32
	bnez	r1,L6
	nop	; not filled.
	addi	r1,r2,#-9
	andi	r1,r1,#0x00ff
	sleui	r1,r1,#1
	beqz	r1,L5
	nop	; not filled.
L6:
	addi	r31,r0,#1
L5:
	add	r1,r0,r31
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _isspace
	.align 2
.proc _isxdigit
.global _isxdigit
_isxdigit:
;  Function 'isxdigit'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	lb	r31,3(r30)
	addi	r2,r0,#0
	addi	r1,r31,#-48
	andi	r1,r1,#0x00ff
	sleui	r1,r1,#9
	bnez	r1,L12
	nop	; not filled.
	addi	r1,r31,#-97
	andi	r1,r1,#0x00ff
	sleui	r1,r1,#5
	bnez	r1,L12
	nop	; not filled.
	andi	r1,r31,#0x00ff
	snei	r1,r1,#65
	bnez	r1,L11
	nop	; not filled.
L12:
	addi	r2,r0,#1
L11:
	add	r1,r0,r2
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _isxdigit
	.align 2
.proc _DisableIntrs
.global _DisableIntrs
_DisableIntrs:
;  Function 'DisableIntrs'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-8
	addi	r2,r0,#15
	sw	(r29),r2
	jal	_SetIntrs
	nop	; not filled.
	addi	r29,r29,#8
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _DisableIntrs
	.align 2
.proc _EnableIntrs
.global _EnableIntrs
_EnableIntrs:
;  Function 'EnableIntrs'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-8
	addi	r2,r0,#0
	sw	(r29),r2
	jal	_SetIntrs
	nop	; not filled.
	addi	r29,r29,#8
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _EnableIntrs
	.align 2
.proc _RestoreIntrs
.global _RestoreIntrs
_RestoreIntrs:
;  Function 'RestoreIntrs'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	addi	r29,r29,#-8
	lw	r2,(r30)
	sw	(r29),r2
	jal	_SetIntrs
	nop	; not filled.
	addi	r29,r29,#8
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _RestoreIntrs
	.align 2
.proc _QueueLinkInit
.global _QueueLinkInit
_QueueLinkInit:
;  Function 'QueueLinkInit'; 0 bytes of locals, 1 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	lw	r1,(r30)
	lw	r2,4(r30)
	addi	r31,r0,#0
	sw	(r1),r31
	sw	12(r1),r2
	lw	r2,0(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueLinkInit
	.align 2
.proc _QueueNext
.global _QueueNext
_QueueNext:
;  Function 'QueueNext'; 0 bytes of locals, 0 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#8	; alloc local storage
	lw	r1,(r30)
	lw	r1,(r1)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueNext
	.align 2
.proc _QueuePrev
.global _QueuePrev
_QueuePrev:
;  Function 'QueuePrev'; 0 bytes of locals, 0 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#8	; alloc local storage
	lw	r1,(r30)
	lw	r1,4(r1)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueuePrev
	.align 2
.proc _QueueFirst
.global _QueueFirst
_QueueFirst:
;  Function 'QueueFirst'; 0 bytes of locals, 0 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#8	; alloc local storage
	lw	r1,(r30)
	lw	r1,(r1)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueFirst
	.align 2
.proc _QueueLast
.global _QueueLast
_QueueLast:
;  Function 'QueueLast'; 0 bytes of locals, 0 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#8	; alloc local storage
	lw	r1,(r30)
	lw	r1,4(r1)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueLast
	.align 2
.proc _QueueInsertAfter
.global _QueueInsertAfter
_QueueInsertAfter:
;  Function 'QueueInsertAfter'; 0 bytes of locals, 2 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	lw	r3,(r30)
	lw	r2,4(r30)
	lw	r1,8(r30)
	sw	8(r1),r3
	sw	4(r1),r2
	lw	r31,(r2)
	sw	(r1),r31
	sw	(r2),r1
	lw	r2,(r1)
	sw	4(r2),r1
	lw	r1,8(r3)
	addi	r1,r1,#1
	sw	8(r3),r1
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueInsertAfter
	.align 2
.proc _QueueInsertFirst
.global _QueueInsertFirst
_QueueInsertFirst:
;  Function 'QueueInsertFirst'; 0 bytes of locals, 2 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	lw	r3,(r30)
	lw	r1,4(r30)
	sw	8(r1),r3
	sw	4(r1),r3
	lw	r31,(r3)
	sw	(r1),r31
	sw	(r3),r1
	lw	r2,(r1)
	sw	4(r2),r1
	lw	r1,8(r3)
	addi	r1,r1,#1
	sw	8(r3),r1
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueInsertFirst
	.align 2
.proc _QueueInsertLast
.global _QueueInsertLast
_QueueInsertLast:
;  Function 'QueueInsertLast'; 0 bytes of locals, 2 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	lw	r3,(r30)
	lw	r1,4(r30)
	lw	r2,4(r3)
	sw	8(r1),r3
	sw	4(r1),r2
	lw	r31,(r2)
	sw	(r1),r31
	sw	(r2),r1
	lw	r2,(r1)
	sw	4(r2),r1
	lw	r1,8(r3)
	addi	r1,r1,#1
	sw	8(r3),r1
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueInsertLast
	.align 2
.proc _QueueRemove
.global _QueueRemove
_QueueRemove:
;  Function 'QueueRemove'; 0 bytes of locals, 2 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#16	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	lw	r31,(r30)
	lw	r1,8(r31)
	lw	r1,8(r1)
	sgti	r1,r1,#0
	beqz	r1,L44
	nop	; not filled.
	lw	r1,4(r31)
	lw	r3,(r31)
	sw	(r1),r3
	lw	r1,(r31)
	lw	r3,4(r31)
	sw	4(r1),r3
	lw	r2,8(r31)
	lw	r1,8(r2)
	addi	r1,r1,#-1
	sw	8(r2),r1
L44:
	addi	r3,r0,#0
	sw	(r31),r3
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueRemove
	.align 2
.proc _QueueLength
.global _QueueLength
_QueueLength:
;  Function 'QueueLength'; 0 bytes of locals, 0 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#8	; alloc local storage
	lw	r1,(r30)
	lw	r1,8(r1)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueLength
	.align 2
.proc _QueueEmpty
.global _QueueEmpty
_QueueEmpty:
;  Function 'QueueEmpty'; 0 bytes of locals, 0 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#8	; alloc local storage
	lw	r1,(r30)
	lw	r1,8(r1)
	seqi	r1,r1,#0
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _QueueEmpty
.data
	.align 2
LC0:
	.ascii "Process #\000"
	.align 2
LC1:
	.ascii "Running process %d (iteration %d)!\n\000"
.text
	.align 2
.proc _doSomething
_doSomething:
;  Function 'doSomething'; 80 bytes of locals, 7 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#120	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	sw	12(r29),r5
	sw	16(r29),r6
	sw	20(r29),r7
	sw	24(r29),r8
	lw	r6,(r30)
	addi	r1,r0,#10
	movi2fp	f0,r6
	movi2fp	f1,r1
	div	f0,f0,f1
	movfp2i	r2,f0
	slli	r1,r2,#0x2
	add	r1,r1,r2
	slli	r1,r1,#0x1
	sub	r7,r6,r1
	slei	r1,r6,#99
	beqz	r1,L52
	nop	; not filled.
	addi	r29,r29,#-8
	slli	r1,r7,#0x2
	add	r1,r1,r7
	slli	r1,r1,#0x2
	lhi	r8,((_mysems)>>16)&0xffff
	addui	r8,r8,(_mysems)&0xffff
	add	r1,r1,r8
	sw	(r29),r1
	addi	r8,r0,#1
	sw	4(r29),r8
	jal	_SemInit
	nop	; not filled.
	addi	r3,r0,#1
	addi	r29,r29,#8
	addi	r4,r30,#-48
	addi	r5,r30,#-88
	add	r2,r0,r6
L56:
	addi	r29,r29,#-8
	sw	(r29),r4
	lhi	r8,((LC0)>>16)&0xffff
	addui	r8,r8,(LC0)&0xffff
	sw	4(r29),r8
	jal	_dstrcpy
	nop	; not filled.
	sw	(r29),r3
	sw	4(r29),r5
	jal	_ditoa
	nop	; not filled.
	sw	(r29),r4
	sw	4(r29),r5
	jal	_dstrcat
	nop	; not filled.
	addi	r29,r29,#-16
	lhi	r8,((_doSomething)>>16)&0xffff
	addui	r8,r8,(_doSomething)&0xffff
	sw	(r29),r8
	slli	r1,r2,#0x5
	sub	r1,r1,r2
	slli	r1,r1,#0x2
	add	r1,r1,r2
	slli	r1,r1,#0x3
	add	r1,r1,r6
	sw	4(r29),r1
	addi	r8,r0,#0
	sw	8(r29),r8
	sw	12(r29),r8
	sw	16(r29),r4
	sw	20(r29),r8
	jal	_ProcessFork
	nop	; not filled.
	addi	r29,r29,#24
	add	r2,r2,r6
	addi	r3,r3,#1
	slei	r1,r3,#6
	bnez	r1,L56
	nop	; not filled.
L52:
	addi	r29,r29,#-8
	slli	r1,r7,#0x2
	add	r1,r1,r7
	slli	r1,r1,#0x2
	lhi	r8,((_mysems)>>16)&0xffff
	addui	r8,r8,(_mysems)&0xffff
	add	r1,r1,r8
	sw	(r29),r1
	jal	_SemWait
	nop	; not filled.
	addi	r3,r0,#0
	addi	r29,r29,#8
	slli	r2,r6,#0x1
	slt	r1,r3,r2
	beqz	r1,L59
	nop	; not filled.
	addi	r5,r0,#1000
	add	r4,r0,r2
L61:
	movi2fp	f0,r3
	movi2fp	f1,r5
	div	f0,f0,f1
	movfp2i	r2,f0
	slli	r1,r2,#0x5
	sub	r1,r1,r2
	slli	r1,r1,#0x2
	add	r1,r1,r2
	slli	r1,r1,#0x3
	sne	r1,r3,r1
	bnez	r1,L62
	nop	; not filled.
	addi	r29,r29,#-16
	lhi	r8,((LC1)>>16)&0xffff
	addui	r8,r8,(LC1)&0xffff
	sw	(r29),r8
	sw	4(r29),r6
	sw	8(r29),r3
	jal	_printf
	nop	; not filled.
	addi	r29,r29,#16
L62:
	addi	r3,r3,#1
	slt	r1,r3,r4
	bnez	r1,L61
	nop	; not filled.
L59:
	addi	r29,r29,#-8
	slli	r1,r7,#0x2
	add	r1,r1,r7
	slli	r1,r1,#0x2
	lhi	r8,((_mysems)>>16)&0xffff
	addui	r8,r8,(_mysems)&0xffff
	add	r1,r1,r8
	sw	(r29),r1
	jal	_SemSignal
	nop	; not filled.
	addi	r29,r29,#8
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r5,12(r29)
	lw	r6,16(r29)
	lw	r7,20(r29)
	lw	r8,24(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _doSomething
.data
	.align 2
LC2:
	.ascii "chasetail\000"
	.align 2
LC3:
	.ascii "Chasing tail %d.\n\000"
	.align 2
LC4:
	.ascii "Open of (%s,0x%x) returns 0x%x.\n\000"
	.align 2
LC5:
	.ascii "ChaseTail\000"
.text
	.align 2
.proc _chaseTail
_chaseTail:
;  Function 'chaseTail'; 0 bytes of locals, 4 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#24	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	sw	12(r29),r5
	lw	r4,(r30)
	lhi	r3,((LC2)>>16)&0xffff
	addui	r3,r3,(LC2)&0xffff
	addi	r29,r29,#-8
	lhi	r5,((LC3)>>16)&0xffff
	addui	r5,r5,(LC3)&0xffff
	sw	(r29),r5
	sw	4(r29),r4
	jal	_printf
	nop	; not filled.
	sw	(r29),r3
	addi	r2,r4,#8192
	sw	4(r29),r2
	jal	_Open
	nop	; not filled.
	addi	r29,r29,#-8
	lhi	r5,((LC4)>>16)&0xffff
	addui	r5,r5,(LC4)&0xffff
	sw	(r29),r5
	sw	4(r29),r3
	sw	8(r29),r2
	sw	12(r29),r1
	jal	_printf
	nop	; not filled.
	addi	r29,r29,#16
	slei	r1,r4,#39
	beqz	r1,L67
	nop	; not filled.
	addi	r29,r29,#-24
	lhi	r5,((_chaseTail)>>16)&0xffff
	addui	r5,r5,(_chaseTail)&0xffff
	sw	(r29),r5
	addi	r1,r4,#1
	sw	4(r29),r1
	addi	r5,r0,#0
	sw	8(r29),r5
	sw	12(r29),r5
	lhi	r5,((LC5)>>16)&0xffff
	addui	r5,r5,(LC5)&0xffff
	sw	16(r29),r5
	addi	r5,r0,#0
	sw	20(r29),r5
	jal	_ProcessFork
	nop	; not filled.
	addi	r29,r29,#24
L67:
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r5,12(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _chaseTail
.data
	.align 2
LC6:
	.ascii "%d \000"
	.align 2
LC7:
	.ascii "Random number %02i is 0x%08x.\n\000"
.text
	.align 2
.proc _SysprocCreateProcesses
.global _SysprocCreateProcesses
_SysprocCreateProcesses:
;  Function 'SysprocCreateProcesses'; 0 bytes of locals, 3 regs to save.
	sw	-4(r29),r30	; push fp
	add	r30,r0,r29	; fp = sp
	sw	-8(r29),r31	; push ret addr
	subui	r29,r29,#24	; alloc local storage
	sw	0(r29),r2
	sw	4(r29),r3
	sw	8(r29),r4
	lhi	r2,((_mysems)>>16)&0xffff
	addui	r2,r2,(_mysems)&0xffff
	addi	r3,r2,#180
L90:
	addi	r29,r29,#-8
	sw	(r29),r2
	addi	r4,r0,#1
	sw	4(r29),r4
	jal	_SemInit
	nop	; not filled.
	addi	r29,r29,#8
	addi	r2,r2,#20
	sle	r1,r2,r3
	bnez	r1,L90
	nop	; not filled.
	lw	r2,0(r29)
	lw	r3,4(r29)
	lw	r4,8(r29)
	lw	r31,-8(r30)
	add	r29,r0,r30
	lw	r30,-4(r30)
	jr	r31
	nop
.endproc _SysprocCreateProcesses
.data
	.align 2
_mysems:
	.space 200
